{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","handleType","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TAIaA,G,kBAAO,SAACC,GAAD,OACpB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCJSC,EAAW,SAACR,GAAD,OACxB,qBAAKC,UAAW,YAAhB,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHVM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,YAAaC,EAA5B,EAA4BA,aAA5B,OACrB,uBACIb,UAAU,SACVc,KAAMH,EACNC,YAAaA,EACbG,SAAUF,MCmDHG,E,kDAtDb,aAAe,IAAD,8BACZ,gBAqBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SApBtC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALH,E,gEAgBO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAWmB,S,+BAQlC,IAAD,EAC0BC,KAAKN,MAA9Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACXU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAKtG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,WAAW,SACXC,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUL,SAAUqB,W,GA5CRI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.39e76fcd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n<div className='card-container'>\r\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n    <h2> {props.monster.name} </h2>\r\n    <p> {props.monster.email} </p>\r\n </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = (props) => (\r\n<div className ='card-list'>      \r\n    {props.monsters.map(monster => \r\n    <Card key={monster.id} monster={monster} />\r\n)}\r\n  </div>\r\n);\r\n\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ( {handleType, placeholder, handleChange } ) => (\r\n    <input \r\n        className='search'\r\n        type={handleType}\r\n        placeholder={placeholder}\r\n        onChange={handleChange} \r\n    />\r\n\r\n)","import './App.css';\nimport { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n\n\n    }\n\n\n\n  }\n\n  \n\n  componentDidMount() { // metoda life-cycle, do której dostęp daje nam komponent class \n    fetch('https://jsonplaceholder.typicode.com/users') // \"sprowadzamy\" dane z tego URL\n    .then(response => response.json()) // przekształcamy odzew na format .json, który javascript ogarnia używać\n    .then(users => this.setState({monsters : users})) // bierzemy users'ów i przypisujemy ich do pustej tablicy monsters\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField : e.target.value})\n\n  }\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox\n        handleType='search'\n        placeholder='search monsters'\n        handleChange={this.handleChange}\n      />\n      \n      <CardList monsters={filteredMonsters}/> \n\n\n    </div>\n    \n  \n    \n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}